//Alexander Urbanyak

#include <cassert>

template <class Item>
deque<Item>::deque() {
	first = 0;
	last = 0;
	count = 0;
}

template <class Item>
Item& deque<Item>::front() {
	assert(!empty());
	return data[first];
}

template <class Item>
Item deque<Item>::front() const {
	assert(!empty());
	return data[first];
}

template <class Item>
Item& deque<Item>::back() {
	assert(!empty());
	return data[last];
}

template <class Item>
Item deque<Item>::back() const {
	assert(!empty());
	return data[last];
}

template <class Item>
void deque<Item>::push_front(const Item& entry) {
	assert(!full());
	if (!empty()){
	    first = prev_index(first);
	    data[first] = entry;
	    count++;
	}
	else {
        data[first] = entry;
        count++;
	}
}

template <class Item>
void deque<Item>::push_back(const Item& entry) {
	assert(!full());
	if (!empty()){
		last = next_index(last);
		data[last] = entry;
		count++;
	}
	else {
	    data[first] = entry;
	    count++;
	}
}

template <class Item>
void deque<Item>::pop_front() {
	assert(!empty());
	first = next_index(first);
    count--;
}

template <class Item>
void deque<Item>::pop_back() {
	assert(!empty());
    last = prev_index(last);
    count--;
}

template <class Item>
size_t deque<Item>::size() const {
	return count;
}

template <class Item>
bool deque<Item>::empty() const {
	return count == 0;
}

template <class T>
bool deque<T>::full() const {
	return count == CAPACITY;
}

template <typename U>
bool operator == (const deque<U>& dq1, const deque<U>& dq2){
	if (dq1.size() != dq2.size()) {
	    return false;
	}
	else {
        U size = dq1.size();
        U dq1Index = dq1.first;
        U dq2Index = dq2.first;
        while (size > 0) {
            if (dq1.data[dq1Index] != dq2.data[dq2Index]){
                return false;
            }
            dq1Index = dq1.next_index(dq1Index);
            dq2Index = dq2.next_index(dq2Index);
            size--;
        }
        return true;
    }
}

template <typename U>
std::ostream& operator << (std::ostream& out, const deque<U>& dq) {
	U index = dq.first;
	for(size_t i = 0; i < dq.size(); i++){
		out << dq.data[index] << " ";
		index = dq.next_index(index);
	}
	out << std::endl;
	return out;
}

template <class Item>
size_t deque<Item>::next_index (size_t i) const {
    if (i == (CAPACITY - 1)) {
        return 0;
    }
    else {
	    return i + 1;
	}
}

template <class Item>
size_t deque<Item>::prev_index (size_t i) const {
	if (i == 0) {
	    return CAPACITY - 1;
	}
	else if (empty()) {
	    return 0;
	}
	else {
	    return i - 1;
	}
}